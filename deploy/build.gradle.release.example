apply plugin: "com.android.application"

import com.android.build.OutputFile
apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {}

    compileSdkVersion 26
    buildToolsVersion '27.0.2'
    defaultConfig {
        applicationId "com.example"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [
                JPUSH_APPKEY: "9b65e821e1f045880ca7f024",
                APP_CHANNEL : "default"
        ]

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            resValue "string", "app_name", "@string/app_name_release"

            //applicationIdSuffix '.shandu'
            //versionNameSuffix '0.2.0'
            debuggable false
            //signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':jcore-react-native')
    compile project(':jpush-react-native')
    compile project(':react-native-sentry')
    compile project(':react-native-svg')
    compile project(':lottie-react-native')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.facebook.react:react-native:+'
    compile project(':react-native-image-picker')
    compile project(':react-native-navigation')
    compile project(':react-native-splash-screen')
    compile 'com.amap.api:location:latest.integration'
    compile 'com.android.support:appcompat-v7:27.1.0'
    compile 'com.android.support:design:27.1.0'
    compile 'com.android.support:appcompat-v7:27.1.0'
    compile 'com.android.support:mediarouter-v7:27.1.0'
    compile 'com.android.support:recyclerview-v7:27.1.0'
    compile 'com.android.support:cardview-v7:27.1.0'
    compile 'com.android.support:support-v13:27.1.0'
    compile 'com.android.support:support-v4:27.1.0'
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('debug.properties')
        def configName = 'debug'
        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }

        def propsFileRelease = rootProject.file('release.properties')
        def configNameRelease = 'release'
        if (propsFile.exists() && android.signingConfigs.hasProperty(configNameRelease)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFileRelease))
            android.signingConfigs[configNameRelease].storeFile = file(props['storeFile'])
            android.signingConfigs[configNameRelease].storePassword = props['storePassword']
            android.signingConfigs[configNameRelease].keyAlias = props['keyAlias']
            android.signingConfigs[configNameRelease].keyPassword = props['keyPassword']
        }
    }
}
